{"ast":null,"code":"// import * as types from '../action-types'\n// export default function reducer (state={number: 0}, action){\n//     switch(action.type){\n//         case types.INCREMENT:\n//             return {number: state.number+ 1};\n//         case types.DECREMENT:\n//             return {number: state.number- 1}\n//         default:\n//             return state\n//     }\n// }\nimport counter1 from './counter1';\nimport counter2 from './counter2'; // import { combineReducers } from 'redux';\n\nfunction combineReducers(reducers) {\n  return function (state = {}, action) {\n    let nextStatus = {};\n\n    for (let key in reducers) {\n      nextStatus[key] = reducers[key](state[key], action);\n    }\n\n    return nextStatus;\n  };\n}\n\nlet reducers = combineReducers({\n  counter1,\n  counter2\n});\nexport default reducers;","map":{"version":3,"sources":["/Users/gaochao/Public/web_study/2.redux/src/store/reducers/index.js"],"names":["counter1","counter2","combineReducers","reducers","state","action","nextStatus","key"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,SAASC,eAAT,CAA0BC,QAA1B,EAAmC;AAC/B,SAAO,UAAUC,KAAK,GAAC,EAAhB,EAAoBC,MAApB,EAA4B;AAC/B,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAI,IAAIC,GAAR,IAAeJ,QAAf,EAAwB;AACpBG,MAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBJ,QAAQ,CAACI,GAAD,CAAR,CAAcH,KAAK,CAACG,GAAD,CAAnB,EAA0BF,MAA1B,CAAlB;AACH;;AACD,WAAOC,UAAP;AACH,GAND;AAQH;;AACD,IAAIH,QAAQ,GAAGD,eAAe,CAAC;AAC3BF,EAAAA,QAD2B;AAE3BC,EAAAA;AAF2B,CAAD,CAA9B;AAKA,eAAeE,QAAf","sourcesContent":["// import * as types from '../action-types'\n\n// export default function reducer (state={number: 0}, action){\n//     switch(action.type){\n//         case types.INCREMENT:\n//             return {number: state.number+ 1};\n//         case types.DECREMENT:\n//             return {number: state.number- 1}\n//         default:\n//             return state\n//     }\n// }\n\nimport counter1 from './counter1';\nimport counter2 from './counter2';\n// import { combineReducers } from 'redux';\nfunction combineReducers (reducers){\n    return function (state={}, action) {\n        let nextStatus = {};\n        for(let key in reducers){\n            nextStatus[key] = reducers[key](state[key], action)\n        }\n        return nextStatus\n    }\n   \n}\nlet reducers = combineReducers({\n    counter1,\n    counter2\n})\n\nexport default reducers"]},"metadata":{},"sourceType":"module"}
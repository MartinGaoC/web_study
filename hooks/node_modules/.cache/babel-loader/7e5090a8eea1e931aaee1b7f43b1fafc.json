{"ast":null,"code":"var _jsxFileName = \"/Users/gaochao/Public/web_study/hooks/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet hookState = []; //存放所有状态的数组，一进来就调用了两次，所以是分别赋值\n\nlet hookIndex = 0; // 索引\n\nfunction useState(initialState) {\n  hookState[hookIndex] = hookState[hookIndex] || initialState;\n  let currentIndex = hookIndex; // 利用闭包的机制, 外层hook会多次渲染 但是我只改变我点击的值得\n\n  function setState(newState) {\n    hookState[currentIndex] = newState;\n    render();\n  }\n\n  return [hookState[hookIndex++], setState];\n}\n\nlet Child = ({\n  data,\n  onButtonClick\n}) => {\n  console.log('Child render');\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => onButtonClick(),\n    children: data.number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Child;\nChild = /*#__PURE__*/React.memo(Child);\n\nlet App = () => {\n  _s();\n\n  let [number, setNumber] = useState(0);\n  let [name, setName] = useState('my');\n  let data = React.useMemo(() => ({\n    number\n  }), [number]);\n  let addClick = React.useCallback(() => setNumber(number + 1), [number]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Child, {\n      data: data,\n      onButtonClick: addClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"8NOZ3P2Zv/XSY2a6OSx8GIui/wo=\");\n\n_c2 = App;\n\nfunction render() {\n  hookIndex = 0;\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 19\n  }, this), document.getElementById('root'));\n}\n\nrender();\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Child\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/gaochao/Public/web_study/hooks/src/index.js"],"names":["React","ReactDOM","hookState","hookIndex","useState","initialState","currentIndex","setState","newState","render","Child","data","onButtonClick","console","log","number","memo","App","setNumber","name","setName","useMemo","addClick","useCallback","e","target","value","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;;AAEA,IAAIC,SAAS,GAAG,EAAhB,C,CAAmB;;AACnB,IAAIC,SAAS,GAAG,CAAhB,C,CAAkB;;AAClB,SAASC,QAAT,CAAmBC,YAAnB,EAAgC;AAC9BH,EAAAA,SAAS,CAACC,SAAD,CAAT,GAAuBD,SAAS,CAACC,SAAD,CAAT,IAAwBE,YAA/C;AACA,MAAIC,YAAY,GAAGH,SAAnB,CAF8B,CAEA;;AAC9B,WAASI,QAAT,CAAmBC,QAAnB,EAA4B;AAE1BN,IAAAA,SAAS,CAACI,YAAD,CAAT,GAA0BE,QAA1B;AACAC,IAAAA,MAAM;AACP;;AACD,SAAO,CAACP,SAAS,CAACC,SAAS,EAAV,CAAV,EAAyBI,QAAzB,CAAP;AACD;;AAED,IAAIG,KAAK,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAA0B;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,sBAAO;AAAQ,IAAA,OAAO,EAAE,MAAIF,aAAa,EAAlC;AAAA,cAAuCD,IAAI,CAACI;AAA5C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAHD;;KAAIL,K;AAKJA,KAAK,gBAAGV,KAAK,CAACgB,IAAN,CAAWN,KAAX,CAAR;;AAIA,IAAIO,GAAG,GAAG,MAAK;AAAA;;AACb,MAAI,CAACF,MAAD,EAASG,SAAT,IAAsBd,QAAQ,CAAC,CAAD,CAAlC;AACA,MAAI,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,IAAD,CAA9B;AACA,MAAIO,IAAI,GAAGX,KAAK,CAACqB,OAAN,CAAc,OAAK;AAACN,IAAAA;AAAD,GAAL,CAAd,EAA8B,CAACA,MAAD,CAA9B,CAAX;AACA,MAAIO,QAAQ,GAAGtB,KAAK,CAACuB,WAAN,CAAkB,MAAKL,SAAS,CAACH,MAAM,GAAC,CAAR,CAAhC,EAA4C,CAACA,MAAD,CAA5C,CAAf;AACA,sBACE;AAAA,4BACE;AAAO,MAAA,KAAK,EAAEI,IAAd;AAAoB,MAAA,QAAQ,EAAGK,CAAD,IAAMJ,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV;AAA3C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEf,IAAb;AAAmB,MAAA,aAAa,EAAEW;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CAXD;;GAAIL,G;;MAAAA,G;;AAYJ,SAASR,MAAT,GAAmB;AACjBN,EAAAA,SAAS,GAAG,CAAZ;AACAF,EAAAA,QAAQ,CAACQ,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,UAAhB,EAAyBkB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AACD;;AAEDnB,MAAM","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nlet hookState = [] //存放所有状态的数组，一进来就调用了两次，所以是分别赋值\nlet hookIndex = 0 // 索引\nfunction useState (initialState){\n  hookState[hookIndex] = hookState[hookIndex] || initialState\n  let currentIndex = hookIndex  // 利用闭包的机制, 外层hook会多次渲染 但是我只改变我点击的值得\n  function setState (newState){\n\n    hookState[currentIndex] = newState\n    render()\n  }\n  return [hookState[hookIndex++], setState]\n}\n\nlet Child = ({data, onButtonClick}) =>{\n  console.log('Child render')\n  return <button onClick={()=>onButtonClick()}>{data.number}</button>\n}\n\nChild = React.memo(Child)\n\n\n\nlet App = () =>{\n  let [number, setNumber] = useState(0)\n  let [name, setName] = useState('my')\n  let data = React.useMemo(()=>({number}), [number])\n  let addClick = React.useCallback(()=> setNumber(number+1), [number])\n  return(\n    <>\n      <input value={name} onChange={(e)=> setName(e.target.value)}/>\n      <Child data={data} onButtonClick={addClick}/>\n    </>\n  )\n}\nfunction render () {\n  hookIndex = 0\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n\nrender()"]},"metadata":{},"sourceType":"module"}